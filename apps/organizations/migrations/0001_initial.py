# Generated by Django 3.2.13 on 2022-06-24 02:35

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

import model_utils.fields

import apps.config.validators
import apps.organizations.validators
import apps.users.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("common", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Benefit",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(help_text="A way to uniquely identify this Benefit", max_length=128)),
                ("description", models.TextField(help_text="The text that appears on the donation page")),
            ],
            options={
                "ordering": ["benefitlevelbenefit__order"],
            },
        ),
        migrations.CreateModel(
            name="BenefitLevel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                ("lower_limit", models.PositiveIntegerField()),
                ("upper_limit", models.PositiveIntegerField(blank=True, null=True)),
                ("currency", models.CharField(default="usd", max_length=3)),
                (
                    "level",
                    models.PositiveSmallIntegerField(
                        default=0, help_text="Is this a first-level benefit, second-level, etc?"
                    ),
                ),
            ],
            options={
                "ordering": ("level",),
            },
        ),
        migrations.CreateModel(
            name="BenefitLevelBenefit",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "order",
                    models.PositiveSmallIntegerField(
                        help_text="The order in which this Benefit appears in this BenefitLevel"
                    ),
                ),
            ],
            options={
                "ordering": ("order",),
            },
        ),
        migrations.CreateModel(
            name="Feature",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "feature_type",
                    models.CharField(choices=[("PL", "Page Limit"), ("BL", "Boolean")], default="PL", max_length=2),
                ),
                (
                    "feature_value",
                    models.CharField(
                        help_text="Limit feature types must be a positive integer. Valid Boolean Type values are ('t', 'f', '1', '0')",
                        max_length=32,
                    ),
                ),
                ("description", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("salesforce_id", models.CharField(blank=True, max_length=255, verbose_name="Salesforce ID")),
                (
                    "slug",
                    models.SlugField(
                        max_length=63, unique=True, validators=[apps.config.validators.validate_slug_against_denylist]
                    ),
                ),
                ("uses_email_templates", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name="PaymentProvider",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("stripe_account_id", models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ("stripe_product_id", models.CharField(blank=True, max_length=255, null=True)),
                ("currency", models.CharField(choices=[("USD", "USD"), ("CAD", "CAD")], default="USD", max_length=3)),
                (
                    "default_payment_provider",
                    models.CharField(choices=[("stripe", "Stripe")], default="stripe", max_length=100),
                ),
                ("stripe_oauth_refresh_token", models.CharField(blank=True, max_length=255)),
                (
                    "stripe_verified",
                    models.BooleanField(
                        default=False,
                        help_text='A fully verified Stripe Connected account should have "charges_enabled: true" in Stripe',
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Plan",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "abstract": False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name="RevenueProgram",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        db_index=True, default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="This will be used as the subdomain for donation pages made under this revenue program. If left blank, it will be derived from the Revenue Program name.",
                        max_length=63,
                        unique=True,
                        validators=[apps.config.validators.validate_slug_against_denylist],
                    ),
                ),
                ("contact_email", models.EmailField(blank=True, max_length=255)),
                ("non_profit", models.BooleanField(default=True, verbose_name="Non-profit?")),
                ("domain_apple_verified_date", models.DateTimeField(blank=True, null=True)),
                ("google_analytics_v3_domain", models.CharField(blank=True, max_length=300, null=True)),
                ("google_analytics_v3_id", models.CharField(blank=True, max_length=50, null=True)),
                ("google_analytics_v4_id", models.CharField(blank=True, max_length=50, null=True)),
                ("facebook_pixel_id", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "twitter_handle",
                    models.CharField(
                        blank=True,
                        help_text="How can your donors mention you on Twitter? Don't include '@' symbol",
                        max_length=15,
                    ),
                ),
                ("website_url", models.URLField(blank=True, help_text="Does this Revenue Program have a website?")),
                (
                    "stripe_statement_descriptor_suffix",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        validators=[apps.organizations.validators.validate_statement_descriptor_suffix],
                    ),
                ),
                (
                    "allow_offer_nyt_comp",
                    models.BooleanField(
                        default=False,
                        help_text="Should page authors for this Revenue Program see the option to offer their donors a comp subscription to the New York Times?",
                        verbose_name="Allow page editors to offer an NYT subscription",
                    ),
                ),
                (
                    "address",
                    models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to="common.address"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
