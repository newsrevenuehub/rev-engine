# Generated by Django 3.2.5 on 2022-02-17 12:34

from django.db import migrations
from django.utils.timezone import now


HISTORY_TYPE_CHANGE = "~"


def create_initial_historicalrecord(apps, schema_editor):
    """
    Create an initial edit for each model with a relation to HistoricalRecord.

    Originally, when we added the relation to django_simple_history's HistoricalRecords,
    we realized that the diff for the first subsequent change on a model didn't
    end up being shown in a meanigful way in the Django admin, because it had no
    previous change to create a diff against. In order for all changes (including
    the first) to have a meaningful diff, we create an initial HistoricalRecord
    for all instances of the model.
    """
    Feature = apps.get_model("organizations", "Feature")
    HistoricalFeature = apps.get_model("organizations", "HistoricalFeature")

    Plan = apps.get_model("organizations", "Plan")
    HistoricalPlan = apps.get_model("organizations", "HistoricalPlan")

    Organization = apps.get_model("organizations", "Organization")
    HistoricalOrganization = apps.get_model("organizations", "HistoricalOrganization")

    BenefitLevel = apps.get_model("organizations", "BenefitLevel")
    HistoricalBenefitLevel = apps.get_model("organizations", "HistoricalBenefitLevel")

    Benefit = apps.get_model("organizations", "Benefit")
    HistoricalBenefit = apps.get_model("organizations", "HistoricalBenefit")

    RevenueProgram = apps.get_model("organizations", "RevenueProgram")
    HistoricalRevenueProgram = apps.get_model("organizations", "HistoricalRevenueProgram")

    for feature in Feature.objects.all():
        HistoricalFeature.objects.create(
            # Fields copied from Feature object.
            id=feature.id,
            created=feature.created,
            modified=feature.modified,
            name=feature.name,
            feature_type=feature.feature_type,
            feature_value=feature.feature_value,
            description=feature.description,
            # Historical fields.
            history_date=now(),
            history_type=HISTORY_TYPE_CHANGE,
            history_user_id=None,
            history_change_reason="Initial change",
        )

    for plan in Plan.objects.all():
        HistoricalPlan.objects.create(
            # Fields copied from Plan object.
            id=plan.id,
            created=plan.created,
            modified=plan.modified,
            name=plan.name,
            # Historical fields.
            history_date=now(),
            history_type=HISTORY_TYPE_CHANGE,
            history_user_id=None,
            history_change_reason="Initial change",
        )

    for organization in Organization.objects.all():
        HistoricalOrganization.objects.create(
            # Fields copied from Organization object.
            id=organization.id,
            created=organization.created,
            modified=organization.modified,
            name=organization.name,
            plan_id=organization.plan_id,
            currency=organization.currency,
            non_profit=organization.non_profit,
            address_id=organization.address_id,
            salesforce_id=organization.salesforce_id,
            default_payment_provider=organization.default_payment_provider,
            stripe_account_id=organization.stripe_account_id,
            stripe_oauth_refresh_token=organization.stripe_oauth_refresh_token,
            stripe_verified=organization.stripe_verified,
            stripe_product_id=organization.stripe_product_id,
            domain_apple_verified_date=organization.domain_apple_verified_date,
            uses_email_templates=organization.uses_email_templates,
            # Historical fields.
            history_date=now(),
            history_type=HISTORY_TYPE_CHANGE,
            history_user_id=None,
            history_change_reason="Initial change",
        )

    for benefit_level in BenefitLevel.objects.all():
        HistoricalBenefitLevel.objects.create(
            # Fields copied from BenefitLevel object.
            id=benefit_level.id,
            created=benefit_level.created,
            modified=benefit_level.modified,
            name=benefit_level.name,
            lower_limit=benefit_level.lower_limit,
            upper_limit=benefit_level.upper_limit,
            currency=benefit_level.currency,
            organization_id=benefit_level.organization_id,
            # Historical fields.
            history_date=now(),
            history_type=HISTORY_TYPE_CHANGE,
            history_user_id=None,
            history_change_reason="Initial change",
        )

    for benefit in Benefit.objects.all():
        HistoricalBenefit.objects.create(
            # Fields copied from Benefit object.
            id=benefit.id,
            created=benefit.created,
            modified=benefit.modified,
            name=benefit.name,
            description=benefit.description,
            organization_id=benefit.organization_id,
            # Historical fields.
            history_date=now(),
            history_type=HISTORY_TYPE_CHANGE,
            history_user_id=None,
            history_change_reason="Initial change",
        )

    for revenue_program in RevenueProgram.objects.all():
        HistoricalRevenueProgram.objects.create(
            # Fields copied from RevenueProgram object.
            id=revenue_program.id,
            created=revenue_program.created,
            modified=revenue_program.modified,
            name=revenue_program.name,
            slug=revenue_program.slug,
            address_id=revenue_program.address_id,
            social_meta_id=revenue_program.social_meta_id,
            organization_id=revenue_program.organization_id,
            contact_email=revenue_program.contact_email,
            default_donation_page_id=revenue_program.default_donation_page_id,
            google_analytics_v3_domain=revenue_program.google_analytics_v3_domain,
            google_analytics_v3_id=revenue_program.google_analytics_v3_id,
            google_analytics_v4_id=revenue_program.google_analytics_v4_id,
            facebook_pixel_id=revenue_program.facebook_pixel_id,
            twitter_handle=revenue_program.twitter_handle,
            website_url=revenue_program.website_url,
            stripe_statement_descriptor_suffix=revenue_program.stripe_statement_descriptor_suffix,
            allow_offer_nyt_comp=revenue_program.allow_offer_nyt_comp,
            # Historical fields.
            history_date=now(),
            history_type=HISTORY_TYPE_CHANGE,
            history_user_id=None,
            history_change_reason="Initial change",
        )


class Migration(migrations.Migration):

    dependencies = [
        ("organizations", "0047_track_model_history"),
    ]

    operations = [migrations.RunPython(create_initial_historicalrecord, reverse_code=migrations.RunPython.noop)]
