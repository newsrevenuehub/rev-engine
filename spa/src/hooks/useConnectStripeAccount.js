import { useEffect, useReducer } from 'react';
import { useAlert } from 'react-alert';
import { useQuery, useQueryClient } from '@tanstack/react-query';

import axios from 'ajax/axios';
import { getStripeAccountLinkStatusPath } from 'ajax/endpoints';
import { SIGN_IN } from 'routes';
import useUser from './useUser';
import { USER_ROLE_ORG_ADMIN_TYPE } from 'constants/authConstants';
import { useHistory } from 'react-router-dom';
import { GENERIC_ERROR } from 'constants/textConstants';

const pending_verification_message =
  "Your account verification is pending with Stripe. This can take up to 24 hours. Check back later, and we'll let you know if Stripe needs more info to proceed.";

const user_action_required_message =
  'Ready to publish your first donation page? Stripe needs additional info from you to configure your account.';

const initialState = {
  requiresVerification: true,
  unverifiedReason: null,
  parentRevenueProgramId: '',
  sendUserToStripe: () => {},
  ctaDescriptionText: user_action_required_message,
  ctaButtonText: 'Take me to Stripe'
};

function getRevenueProgramIdRequiringVerification(user) {
  return user?.role_type?.[0] === USER_ROLE_ORG_ADMIN_TYPE &&
    user?.revenue_programs?.[0]?.payment_provider_stripe_verified === false
    ? user.revenue_programs[0].id
    : null;
}

function reducer(state, action) {
  switch (action.type) {
    case 'accountLinkStatusRetrieved':
      return {
        ...state,
        sendUserToStripe: () => {
          window.location.href = action.payload.url;
        },
        requiresVerification: action.payload.requiresVerification,
        unverifiedReason: action.payload.reason,
        ctaDescriptionText:
          action.payload.reason === 'past_due' ? user_action_required_message : pending_verification_message
      };
    case 'userRetrieved':
      const parentRevenueProgramId = getRevenueProgramIdRequiringVerification(action.payload);
      return { ...state, parentRevenueProgramId, requiresVerification: !!parentRevenueProgramId };
    default:
      throw new Error();
  }
}

async function fetchAccountLinkStatus(rpId) {
  const { data } = await axios.post(getStripeAccountLinkStatusPath(rpId), {});
  return data;
}

export default function useConnectStripeAccount() {
  const alert = useAlert();
  const { user } = useUser();
  const queryClient = useQueryClient();
  const history = useHistory();

  const [state, dispatch] = useReducer(reducer, initialState);

  useEffect(() => {
    if (user) {
      dispatch({ type: 'userRetrieved', payload: user });
    }
  }, [user]);

  const { isLoading: stripeAccountLinkStatusLoading } = useQuery(
    ['stripeAccountLinkStatus'],
    () => fetchAccountLinkStatus(state.parentRevenueProgramId),
    {
      enabled: !!state.parentRevenueProgramId && state.requiresVerification,
      refetchInterval: 30000, // in ms, so 30 seconds. note this won't happen if app browser tab is inactive
      onSuccess: (data) => {
        if (!data.requiresVerification) {
          // NB: `['user']` is meant to refer to a named query generated by useQuery call
          // in custom useUser hook. This will cause the user to be refetched,
          // the user's revenue program should now appear as having Stripe verified, which will
          // in turn hide the Stripe Account Link CTAs.
          queryClient.invalidateQueries('user');
        }
        dispatch({ type: 'accountLinkStatusRetrieved', payload: data });
      },
      onError: (err) => {
        if (err?.name === 'AuthenticationError') {
          history.push(SIGN_IN);
        } else {
          console.error(err);
          alert.error(GENERIC_ERROR);
        }
      }
    }
  );

  return {
    loading: stripeAccountLinkStatusLoading,
    requiresVerification: state.requiresVerification,
    unverifiedReason: state.unverifiedReason,
    sendUserToStripe: state.sendUserToStripe,
    ctaDescriptionText: state.ctaDescriptionText,
    ctaButtonText: state.ctaButtonText
  };
}
