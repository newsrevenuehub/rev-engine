import json
from dataclasses import asdict
from unittest import mock

from django.utils import timezone

import pytest
from rest_framework import serializers
from rest_framework.exceptions import ErrorDetail
from rest_framework.test import APIRequestFactory, APITestCase

from apps.api.tests import RevEngineApiAbstractTestCase
from apps.organizations.models import BenefitLevelBenefit, FreePlan, Plans
from apps.organizations.serializers import PaymentProviderSerializer
from apps.organizations.tests.factories import (
    BenefitFactory,
    BenefitLevelFactory,
    RevenueProgramFactory,
)
from apps.pages.defaults import BENEFITS, SWAG
from apps.pages.models import DonationPage
from apps.pages.serializers import (
    DonationPageFullDetailSerializer,
    StyleListSerializer,
    TemplateDetailSerializer,
)
from apps.pages.tests.factories import DonationPageFactory, StyleFactory, TemplateFactory
from apps.pages.validators import required_style_keys
from apps.users.models import Roles
from apps.users.tests.factories import RoleAssignmentFactory


class DonationPageFullDetailSerializerTest(RevEngineApiAbstractTestCase):
    def setUp(self):
        self.set_up_domain_model()
        # we do this so not limited to single page
        self.org1.plan_name = Plans.PLUS
        self.org1.save()
        self.page = self.org1_rp1.donationpage_set.first()
        self.serializer = DonationPageFullDetailSerializer
        self.request_factory = APIRequestFactory()

        self.benefit_1 = BenefitFactory(revenue_program=self.org1_rp1)
        self.benefit_2 = BenefitFactory(revenue_program=self.org1_rp1)
        self.benefit_level_1 = BenefitLevelFactory(revenue_program=self.org1_rp1)
        self.benefit_level_2 = BenefitLevelFactory(revenue_program=self.org1_rp1)

        BenefitLevelBenefit.objects.create(benefit_level=self.benefit_level_1, benefit=self.benefit_1, order=1)
        BenefitLevelBenefit.objects.create(benefit_level=self.benefit_level_1, benefit=self.benefit_2, order=2)
        BenefitLevelBenefit.objects.create(benefit_level=self.benefit_level_2, benefit=self.benefit_1, order=1)

    def _post_page(self, data):
        serializer = DonationPageFullDetailSerializer(data=data)
        request = self.request_factory.post("/")
        request.user = self.org_user
        serializer.context["request"] = request
        assert serializer.is_valid(raise_exception=True), serializer.errors
        return serializer.save()

    def test_has_expected_fields(self):
        serializer = self.serializer(instance=self.page)
        expected_first_level_keys = {
            "allow_offer_nyt_comp",
            "benefit_levels",
            "created",
            "currency",
            "elements",
            "graphic_thumbnail",
            "graphic",
            "header_bg_image_thumbnail",
            "header_bg_image",
            "header_link",
            "header_logo_thumbnail",
            "header_logo",
            "heading",
            "id",
            "modified",
            "name",
            "page_screenshot",
            "payment_provider",
            "plan",
            "post_thank_you_redirect",
            "published_date",
            "revenue_program_country",
            "revenue_program_is_nonprofit",
            "revenue_program",
            "sidebar_elements",
            "slug",
            "stripe_account_id",
            "styles",
            "template_pk",
            "thank_you_redirect",
        }
        assert set(serializer.data.keys()) == expected_first_level_keys
        plan_keys = set(asdict(FreePlan).keys())
        assert plan_keys == serializer.data["plan"].keys()

    def test_create(self):
        rp = self.page.revenue_program
        page = self._post_page(
            {
                # name is autogenerated from RevenueProgram.
                "slug": "my-new-page",
                "revenue_program": rp.pk,
            }
        )
        assert rp == page.revenue_program
        assert "my-new-page" == page.slug
        assert f"{rp.name}1" == page.name  # Serial int suffix specifically called for in DEV-2297.
        # Works 2nd time (unique page name generation).
        page2 = self._post_page(
            {
                # name is autogenerated from RevenueProgram.
                "slug": "my-new-page2",
                "revenue_program": rp.pk,
            }
        )
        assert "my-new-page2" == page2.slug
        assert f"{rp.name}2" == page2.name  # Serial int suffix specifically called for in DEV-2297.

    def test_create_with_permitted_free_plan_page_elements(self):
        rp = RevenueProgramFactory()
        rp.organization.plan_name = Plans.FREE
        rp.organization.save()
        ra = RoleAssignmentFactory(organization=rp.organization, role_type=Roles.ORG_ADMIN)

        with open("apps/pages/tests/fixtures/free-plan-page-elements.json") as fl:
            page_elements = json.load(fl)

        data = {
            "slug": "my-new-page",
            "revenue_program": rp.pk,
            "elements": page_elements,
        }
        serializer = DonationPageFullDetailSerializer(data=data)
        request = self.request_factory.post("/")
        request.user = ra.user
        serializer.context["request"] = request
        assert serializer.is_valid()

    def test_create_with_permitted_free_plan_sidebar_elements(self):
        rp = RevenueProgramFactory()
        rp.organization.plan_name = Plans.FREE
        rp.organization.save()
        ra = RoleAssignmentFactory(organization=rp.organization, role_type=Roles.ORG_ADMIN)

        with open("apps/pages/tests/fixtures/free-plan-sidebar-elements.json") as fl:
            sidebar_elements = json.load(fl)
        data = {
            "slug": "my-new-page",
            "revenue_program": rp.pk,
            "sidebar_elements": sidebar_elements,
        }
        serializer = DonationPageFullDetailSerializer(data=data)
        request = self.request_factory.post("/")
        request.user = ra.user
        serializer.context["request"] = request
        assert serializer.is_valid()

    def test_create_with_unpermitted_free_plan_page_elements(self):
        rp = RevenueProgramFactory()
        rp.organization.plan_name = Plans.FREE
        rp.organization.save()
        ra = RoleAssignmentFactory(organization=rp.organization, role_type=Roles.ORG_ADMIN)
        with open("apps/pages/tests/fixtures/plus-plan-page-elements.json") as fl:
            page_elements = json.load(fl)
        data = {
            # name is autogenerated from RevenueProgram.
            "slug": "my-new-page",
            "revenue_program": rp.pk,
            "elements": page_elements,
        }
        serializer = DonationPageFullDetailSerializer(data=data)
        request = self.request_factory.post("/")
        request.user = ra.user
        serializer.context["request"] = request
        assert serializer.is_valid() is False
        assert str(serializer.errors["page_elements"][0]) == "You're not allowed to use the following elements: DSwag"

    def test_create_with_unpermitted_free_plan_sidebar_elements(self):
        rp = RevenueProgramFactory()
        rp.organization.plan_name = Plans.FREE
        rp.organization.save()
        ra = RoleAssignmentFactory(organization=rp.organization, role_type=Roles.ORG_ADMIN)
        with open("apps/pages/tests/fixtures/plus-plan-sidebar-elements.json") as fl:
            sidebar_elements = json.load(fl)
        data = {
            # name is autogenerated from RevenueProgram.
            "slug": "my-new-page",
            "revenue_program": rp.pk,
            "sidebar_elements": sidebar_elements,
        }
        serializer = DonationPageFullDetailSerializer(data=data)
        request = self.request_factory.post("/")
        request.user = ra.user
        serializer.context["request"] = request
        assert serializer.is_valid() is False
        assert (
            str(serializer.errors["sidebar_elements"][0])
            == "You're not allowed to use the following elements: DBenefits"
        )

    def test_create_with_template(self):
        template = TemplateFactory(revenue_program=self.page.revenue_program)
        page = self._post_page(
            {
                "template_pk": template.pk,
                # name is autogenerated from template.
                "slug": "my-new-page-taken-from-data",
                "revenue_program": template.revenue_program.pk,  # TODO: Why is rp not taken from template by serializer?
            }
        )
        assert template.revenue_program == page.revenue_program
        assert template.heading == page.heading
        assert "my-new-page-taken-from-data" == page.slug
        assert f"New Page From Template ({template.name})" == page.name
        # Works 2nd time (unique page name generation).
        page2 = self._post_page(
            {
                "template_pk": template.pk,
                # name is autogenerated from template.
                "slug": "my-new-page-taken-from-data2",
                "revenue_program": template.revenue_program.pk,  # TODO: Why is rp not taken from template by serializer?
            }
        )
        assert "my-new-page-taken-from-data2" == page2.slug
        assert page.name == page2.name  # There is no requirement for unique page names.

    def test_create_with_template_override_autoname_generation(self):
        template = TemplateFactory(revenue_program=self.page.revenue_program)
        page = self._post_page(
            {
                "template_pk": template.pk,
                "name": "BillyBob'sBestBistro",
                "slug": "my-new-page-taken-from-data",
                "revenue_program": template.revenue_program.pk,
            }
        )
        assert "my-new-page-taken-from-data" == page.slug
        assert "BillyBob'sBestBistro" == page.name

    def test_create_with_template_bad_revenue_program(self):
        template = TemplateFactory()  # Factory creates some yahoo, unowned RP.
        with pytest.raises(serializers.ValidationError) as e:
            self._post_page(
                {
                    "template_pk": template.pk,
                    "slug": "my-new-page-taken-from-data",
                    "revenue_program": template.revenue_program.pk,
                }
            )
        assert "Not found" in str(e)

    def test_create_with_template_does_not_exist(self):
        with pytest.raises(serializers.ValidationError) as e:
            self._post_page(
                {
                    "template_pk": 12342342,
                    "slug": "my-new-page-from-a-template",
                    "revenue_program": self.page.revenue_program.pk,
                }
            )
        assert "template no longer exists" in str(e)

    def test_update(self):
        serializer = DonationPageFullDetailSerializer()
        new_name = f"changed{self.page.name}"
        dp = serializer.update(self.page, {"name": new_name})
        assert isinstance(dp, DonationPage)
        assert self.page.pk == dp.pk
        assert new_name == dp.name

    def test_update_with_style(self):
        serializer = DonationPageFullDetailSerializer()
        style = StyleFactory(revenue_program=self.page.revenue_program)
        assert style != self.page.styles
        dp = serializer.update(self.page, {"styles_pk": style.pk})
        assert isinstance(dp, DonationPage)
        assert self.page.pk == dp.pk
        assert style == dp.styles

    def test_update_remove_style(self):
        serializer = DonationPageFullDetailSerializer()
        self.page.styles = StyleFactory(revenue_program=self.page.revenue_program)
        self.page.save()
        dp = serializer.update(self.page, {"styles_pk": None})
        assert isinstance(dp, DonationPage)
        assert self.page.pk == dp.pk
        assert None is dp.styles

    def test_update_missing_styles(self):
        serializer = DonationPageFullDetailSerializer()
        with pytest.raises(serializers.ValidationError) as e:
            serializer.update(self.page, {"styles_pk": "2132423"})
        assert "Could not find Style" in str(e)

    def test_payment_provider(self):
        serializer = self.serializer(self.page)
        self.assertEqual(
            serializer.data["payment_provider"],
            PaymentProviderSerializer(self.page.revenue_program.payment_provider).data,
        )

    def test_serializer_not_broken_by_no_payment_provider(self):
        self.page.revenue_program.payment_provider.delete()
        self.page.refresh_from_db()
        self.serializer(self.page).data

    def test_has_analytics_data(self):
        serializer = self.serializer(self.page)
        data = serializer.data
        for key in (
            "google_analytics_v3_domain",
            "google_analytics_v3_id",
            "google_analytics_v4_id",
            "facebook_pixel_id",
        ):
            self.assertEqual(data["revenue_program"][key], getattr(self.page.revenue_program, key))

    def test_get_benefit_levels(self):
        serializer = self.serializer(self.page)
        data = serializer.data

        # Should have the right amount of benefit levels...
        self.assertEqual(len(data["benefit_levels"]), 2)
        # ...and they should be in the right order.
        self.assertEqual(data["benefit_levels"][0]["name"], self.benefit_level_1.name)

        # Benefit level should have the right number of benefits...
        self.assertEqual(len(data["benefit_levels"][0]["benefits"]), 2)
        # ...and they should be in the right order.
        self.assertEqual(data["benefit_levels"][0]["benefits"][0]["name"], self.benefit_1.name)

        # No obj.revenuep_rogram
        assert None is serializer.get_benefit_levels(mock.Mock(revenue_program=None))

    def test_get_revenue_program_is_nonprofit(self):
        # Set it true, expect it in page serializer
        self.page.revenue_program.non_profit = True
        self.page.revenue_program.save()
        self.page.revenue_program.refresh_from_db()
        serializer = self.serializer(self.page)
        data = serializer.data
        self.assertEqual(data["revenue_program_is_nonprofit"], True)

        # Set it false, expect it in page serializer
        self.page.revenue_program.non_profit = False
        self.page.revenue_program.save()
        self.page.revenue_program.refresh_from_db()
        serializer = self.serializer(self.page)
        data = serializer.data
        self.assertEqual(data["revenue_program_is_nonprofit"], False)

    # TODO: [DEV-2187] Remove stripe_account_id from DonationPageFullDetailSerializer
    def test_live_context_adds_org_stripe_account_id(self):
        serializer = self.serializer(self.page, context={"live": False})
        self.assertIsNone(serializer.data["stripe_account_id"])

        serializer = self.serializer(self.page, context={"live": True})
        self.assertIsNotNone(serializer.data["stripe_account_id"])
        self.assertEqual(
            serializer.data["stripe_account_id"], self.page.revenue_program.payment_provider.stripe_account_id
        )

    def test_not_live_context_adds_allow_offer_nyt_comp(self):
        serializer = self.serializer(self.page, context={"live": True})
        self.assertIsNone(serializer.data["allow_offer_nyt_comp"])

        serializer = self.serializer(self.page, context={"live": False})
        self.assertIsNotNone(serializer.data["allow_offer_nyt_comp"])
        self.assertEqual(serializer.data["allow_offer_nyt_comp"], self.page.revenue_program.allow_offer_nyt_comp)

    def test_plan_page_limits_are_respected(self):
        self.org1.plan_name = Plans.FREE
        self.org1.save()
        assert self.page.revenue_program.organization.plan.page_limit == 1

        serializer = self.serializer(
            data={
                "slug": "my-new-page",
                "revenue_program": self.page.revenue_program.pk,
            }
        )
        request = self.request_factory.post("/")
        request.user = self.org_user
        serializer.context["request"] = request
        assert serializer.is_valid() is False
        assert str(serializer.errors["non_field_errors"][0]) == ("Your organization has reached its limit of 1 page")

    def test_cannot_set_thank_you_redirect_when_plan_not_enabled(self):
        self.page.revenue_program.organization.plan_name = Plans.FREE
        self.page.revenue_program.organization.save()
        request = self.request_factory.post("/")
        request.user = self.org_user
        serializer = self.serializer(
            data={
                "slug": "my-new-page",
                "revenue_program": self.page.revenue_program.pk,
                "thank_you_redirect": "https://www.somewhere.com",
            }
        )
        serializer.context["request"] = request
        assert serializer.is_valid() is False
        assert str(serializer.errors["thank_you_redirect"][0]) == (
            "This organization's plan does not enable assigning a custom thank you URL"
        )

    def test_can_set_thank_you_redirect_when_plan_enabled(self):
        self.page.revenue_program.organization.plan_name = Plans.PLUS
        self.page.revenue_program.organization.save()
        request = self.request_factory.post("/")
        request.user = self.org_user
        redirect_url = "https://www.somewhere.com"
        serializer = self.serializer(
            data={
                "slug": "my-new-page",
                "revenue_program": self.page.revenue_program.pk,
                "thank_you_redirect": redirect_url,
            }
        )
        serializer.context["request"] = request
        assert serializer.is_valid() is True
        serializer.save()
        assert serializer.data["thank_you_redirect"] == redirect_url

    def test_unpermitted_page_elements_are_not_returned(self):
        self.page.revenue_program.organization.plan_name = Plans.FREE
        self.page.revenue_program.organization.save()
        with open("apps/pages/tests/fixtures/plus-plan-page-elements.json") as fl:
            self.page.page_elements = json.load(fl)
        self.page.save()
        assert SWAG in [elem["type"] for elem in self.page.page_elements]
        assert SWAG not in FreePlan.page_elements
        serialized = self.serializer(instance=self.page)
        assert SWAG not in [elem["type"] for elem in serialized.data["elements"]]
        assert len(serialized.data["elements"]) == len(self.page.page_elements) - 1

    def test_unpermitted_sidebar_elements_are_not_returned(self):
        self.page.revenue_program.organization.plan_name = Plans.FREE
        self.page.revenue_program.organization.save()
        with open("apps/pages/tests/fixtures/plus-plan-sidebar-elements.json") as fl:
            self.page.sidebar_elements = json.load(fl)
        self.page.save()
        assert BENEFITS in [elem["type"] for elem in self.page.sidebar_elements]
        assert BENEFITS not in FreePlan.sidebar_elements
        serialized = self.serializer(instance=self.page)
        assert BENEFITS not in [elem["type"] for elem in serialized.data["sidebar_elements"]]
        assert len(serialized.data["sidebar_elements"]) == len(self.page.sidebar_elements) - 1


class TemplateDetailSerializerTest(RevEngineApiAbstractTestCase):
    def setUp(self):
        self.set_up_domain_model()
        self.page = self.org1_rp1.donationpage_set.first()
        self.template = TemplateFactory(revenue_program=self.org1_rp1)
        self.serializer = TemplateDetailSerializer
        request = APIRequestFactory()
        request.user = self.org_user
        self.request = request

    def test_create_with_page_pk_uses_page_as_template(self):
        template_data = {
            "page": self.page.pk,
            "name": "My New Template",
        }
        serializer = self.serializer(data=template_data, context={"request": self.request})
        self.assertTrue(serializer.is_valid())
        new_template = serializer.save()
        self.assertEqual(new_template.heading, self.page.heading)

    def test_when_no_reference_to_page(self):
        template_data = {
            "name": "My New Template",
            "heading": "My heading",
        }
        serializer = self.serializer(data=template_data, context={"request": self.request})
        self.assertTrue(serializer.is_valid())
        new_template = serializer.save()
        for key, val in template_data.items():
            self.assertEqual(getattr(new_template, key), val)

    def test_when_reference_revenue_program_in_and_no_page(self):
        template_data = {"name": "my template name", "revenue_program": self.org1_rp1.pk}
        serializer = self.serializer(data=template_data, context={"request": self.request})
        self.assertTrue(serializer.is_valid())
        new_template = serializer.save()
        self.assertEqual(new_template.revenue_program.pk, template_data["revenue_program"])

    def test_when_reference_revenue_program_and_page_where_rp_is_not_pages_rp(self):
        self.assertNotEqual(self.page.revenue_program, self.org1_rp2)
        template_data = {
            "name": "my template name",
            "revenue_program": self.org1_rp2.pk,
            "page": self.page.pk,
        }
        serializer = self.serializer(data=template_data, context={"request": self.request})
        self.assertTrue(serializer.is_valid())
        new_template = serializer.save()
        self.assertEqual(new_template.revenue_program.pk, template_data["revenue_program"])
        self.assertEqual(new_template.name, template_data["name"])
        self.assertEqual(new_template.heading, self.page.heading)

    def test_serializer_is_invalid_when_referenced_page_not_found(self):
        template_data = {
            "page": self.page.pk,
            "name": "My New Template",
        }
        serializer = self.serializer(data=template_data, context={"request": self.request})
        self.assertTrue(serializer.is_valid())
        page_pk = self.page.pk
        # contributions protect referenced page from being deleted, so need to delete these first
        self.page.contribution_set.all().delete()
        self.page.delete()
        # NB, serializer must be reinitialized after deleting page, otherwise `is_valid` will
        # not cause validation to be run anew
        serializer = self.serializer(data=template_data, context={"request": self.request})
        self.assertFalse(serializer.is_valid())
        self.assertIn("page", serializer.errors)
        self.assertIsInstance(serializer.errors["page"][0], ErrorDetail)
        self.assertEqual(str(serializer.errors["page"][0]), f'Invalid pk "{page_pk}" - object does not exist.')


class StyleListSerializerTest(APITestCase):
    def setUp(self):
        self.rev_program = RevenueProgramFactory()
        self.style_1 = StyleFactory(revenue_program=self.rev_program)
        self.style_2 = StyleFactory(revenue_program=self.rev_program)
        self.donation_page_live = DonationPageFactory(
            published_date=timezone.now(), styles=self.style_1, revenue_program=self.rev_program
        )
        self.donation_page_unlive = DonationPageFactory(styles=self.style_2, revenue_program=self.rev_program)
        self.serializer = StyleListSerializer
        self.other_rev_program = RevenueProgramFactory()
        valid_styles_json = {}
        for k, v in required_style_keys.items():
            valid_styles_json[k] = v()
        self.updated_styled_data = {
            "name": "New Test Styles",
            "revenue_program": {"name": self.rev_program.name, "slug": self.rev_program.slug},
            **valid_styles_json,
        }

    def test_get_used_live(self):
        live_style_serializer = self.serializer(self.style_1)
        nonlive_style_serializer = self.serializer(self.style_2)

        self.assertIn("used_live", live_style_serializer.data)
        self.assertTrue(live_style_serializer.data["used_live"])
        self.assertIn("used_live", nonlive_style_serializer.data)
        self.assertFalse(nonlive_style_serializer.data["used_live"])
