import { useEffect, useState } from 'react';
import { useAlert } from 'react-alert';
import { useMutation, useQueryClient } from '@tanstack/react-query';

import axios from 'ajax/axios';
import { getStripeAccountLinkCreateCompletePath, getStripeAccountLinkCreatePath } from 'ajax/endpoints';
import useUser from './useUser';
import { USER_ROLE_ORG_ADMIN_TYPE } from 'constants/authConstants';
import { useHistory, useLocation } from 'react-router-dom';
import { GENERIC_ERROR } from 'constants/textConstants';

const postAccountLinkSuccess = (rpId) => {
  return axios.post(getStripeAccountLinkCreateCompletePath(rpId));
};

function useConnectStripeAccount() {
  const alert = useAlert();
  const { user } = useUser();
  const { pathname, search } = useLocation();
  const history = useHistory();
  const [revenueProgramIdForVerification, setRevenueProgramIdForVerification] = useState();

  /*If user is an rp_admin whose first RP is not verified, we set the id
  of that RP. In calling context, this can be used to conditionally display Stripe Connect CTA elements.

  Note that the logic here is unsophisticated. It presumes that the primary
  user (for now) is an rp_admin with a single revenue program. It will not
  cause the Stripe Connect CTA elements to be displayed to users with other role types
  than rp_admin. It also does not support connecting > 1 revenue program beyond
  the first to appear in user.revenue_programs.
  */
  useEffect(() => {
    if (
      user?.role_type?.[0] === USER_ROLE_ORG_ADMIN_TYPE &&
      user?.revenue_programs?.[0]?.payment_provider_stripe_verified === false
    ) {
      setRevenueProgramIdForVerification(user.revenue_programs[0].id);
    }
  }, [user?.revenue_programs, user?.role_type]);

  /*After a user goes through the Stripe Account Link on the Stripe site,
  they will be sent back to the dashboard root but with an empty stripeAccountLinkSuccess
  query param, which signals that we should tell the server to retrieve the Stripe Account
  and update the `stripe_verified` property on the RP's payment provider if the Stripe Account
  is properly configured.
  */
  const queryClient = useQueryClient();

  const signalStripeAccountLinkSuccess = useMutation(() => postAccountLinkSuccess(revenueProgramIdForVerification), {
    onSuccess: () => {
      // NB: `['user']` is meant to refer to a named query generated by useQuery call
      // in custom useUser hook. This will cause the user to be refetched,
      // the user's revenue program should now appear as having Stripe verified, which will
      // in turn hide the Stripe Account Link CTAs.
      queryClient.invalidateQueries(['user']);
      setRevenueProgramIdForVerification(null);
      // this removes the `stripeAccountLinkSuccess` query param from route that
      // tells app to ping stripe account link success endpoint on server.
      const params = new URLSearchParams(search);
      params.delete('stripeAccountLinkSuccess');
      history.replace({ pathname, search: params.toString() });
    },
    onError: (err) => {
      // calling console.error will create a Sentry error.
      console.error(err);
      alert.error(GENERIC_ERROR);
    }
  });

  const createStripeAccountLink = useMutation(
    () => axios.post(getStripeAccountLinkCreatePath(revenueProgramIdForVerification), {}).then(({ data }) => data),
    {
      // url will be a Stripe generated URL for Stripe's own onboarding/connect flow.
      onSuccess: ({ url }) => {
        if (url) {
          window.location = url;
        }
      },
      onError: (err) => {
        // calling console.error will create a Sentry error.
        console.error(err);
        alert.error(GENERIC_ERROR);
      }
    }
  );

  /* After a user goes through the Stripe Account onboarding flow on the Stripe site,
  they get sent back to /stripe-account-link-complete, which (in DashboardRouter.js) redirects
  to the dashboard app route with a `stripeAccountLinkSuccess` present. If this component
  loads and that param is present, we signal to the server that Stripe Account Link is complete,
  and the server will update the revenue program's payment provider's stripe_verified value
  to be `true` if it sees that the account is ready to accept charges.
  */
  useEffect(() => {
    const params = new URLSearchParams(search);
    if (
      revenueProgramIdForVerification &&
      [...params.keys()].includes('stripeAccountLinkSuccess') &&
      !signalStripeAccountLinkSuccess.isLoading &&
      !signalStripeAccountLinkSuccess.isSuccess &&
      !signalStripeAccountLinkSuccess.isError
    ) {
      signalStripeAccountLinkSuccess.mutate(revenueProgramIdForVerification);
    }
  }, [revenueProgramIdForVerification, search, signalStripeAccountLinkSuccess]);

  return {
    createStripeAccountLink,
    requiresStripeVerification: !!revenueProgramIdForVerification
  };
}

export default useConnectStripeAccount;
