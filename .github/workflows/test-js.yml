name: Build and Test React Application

on:
  push:
    branches:
      - "*"
jobs:
  # Only run if SPA code has changed
  check-changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      spa: ${{ steps.filter.outputs.spa }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            spa:
              - 'spa/**'
  js-test:
    needs: check-changes
    if: ${{ needs['check-changes'].outputs.spa == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: "spa/package-lock.json"
          node-version-file: ".nvmrc"
      - name: Install node dependencies
        run: |
          cd spa
          npm ci
      - name: Run tests and collect coverage
        run: |
          cd spa
          npm run test:coverage -- --coverageReporters json-summary
          echo "LINE_PCT=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')" >> $GITHUB_ENV
          echo "STATEMENT_PCT=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')" >> $GITHUB_ENV
          echo "BRANCHES_PCT=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')" >> $GITHUB_ENV
      - name: Comment with coverage percentages
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            ### Jest unit test coverage
            | Lines                | Statements                |                 Branches |
            |----------------------|---------------------------|--------------------------|
            | ${{ env.LINE_PCT }}% | ${{ env.STATEMENT_PCT }}% | ${{ env.BRANCHES_PCT }}% |
          message-id: jest-coverage-comment
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  cypress-test:
    needs: check-changes
    if: ${{ needs['check-changes'].outputs.spa == 'true' }}
    runs-on: ubuntu-latest
    services:
      postgres:
        # From:
        # https://docs.github.com/en/actions/guides/creating-postgresql-service-containers
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run 3 copies of the current job in parallel
        containers: [1, 2, 3]
    env:
      REACT_APP_HUB_STRIPE_API_PUB_KEY: pk_test_djfoi12312414
      REACT_APP_STRIPE_ACCOUNT_ID: acc_3kjfo23jj
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install library
        run: poetry install --no-interaction
      - name: Setup custom hosts for subdomain testing
        run: |
          echo "127.0.0.1 revengine-testabc123.com" | sudo tee -a /etc/hosts
          echo "127.0.0.1 revenueprogram.revengine-testabc123.com" | sudo tee -a /etc/hosts
      - name: Debug hosts
        run: cat /etc/hosts
      - name: Create settings and dev server start script
        run: |
          cp revengine/settings/local.example.py revengine/settings/local.py
          echo 'ALLOWED_HOSTS = ["*"]' >> revengine/settings/local.py
          cat revengine/settings/local.py
          echo "source ../.venv/bin/activate" > spa/start_django.sh
          echo "touch ../.env" >> spa/start_django.sh
          echo "python ../manage.py migrate" >> spa/start_django.sh
          echo "python ../manage.py runserver &" >> spa/start_django.sh
          echo "npm start &" >> spa/start_django.sh
          cat spa/start_django.sh
      - name: Cypress tests
        uses: cypress-io/github-action@v6
        with:
          start: bash start_django.sh
          working-directory: spa
          wait-on: http://localhost:8000/
          wait-on-timeout: 120
          # because of "record" and "parallel" parameters
          # these containers will load balance all found tests among themselves
          record: true
          parallel: true
          group: "Cypress integration tests"
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          DEBUG: "@cypress/github-action"
          DJANGO_SETTINGS_MODULE: revengine.settings.local
          DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/postgres
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_PROJECT_ID: ${{ secrets.PROJECT_ID }}
